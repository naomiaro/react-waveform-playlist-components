import React, { Fragment } from 'react';
import { useAsync } from 'react-async-hook';
import WaveformData from 'waveform-data';

type Location = string;
type Type = 'json' | 'dat';

type RenderProps = {
  data?: WaveformData;
  loading: boolean;
  error?: Error;
};

export type Props = {
  location: Location;
  type: Type;
  children: (args: RenderProps) => JSX.Element;
};

const fetchPeaks = async (dataUri: string, type: 'dat' | 'json') => {
  const parsePeaksMethod = type === 'dat' ? 'arrayBuffer' : 'json';
  const peaksResponse = await fetch(dataUri);
  const decodedPeaks = await peaksResponse[parsePeaksMethod]();
  return WaveformData.create(decodedPeaks);
};

export function useWaveformData(location: Location, type: Type) {
  const asyncPeaks = useAsync(fetchPeaks, [location, type]);

  return {
    loading: asyncPeaks.loading,
    error: asyncPeaks.error,
    data: asyncPeaks.result,
  };
}

/**
 * Fetches and decodes WaveformData files generated by https://github.com/bbc/audiowaveform.
 *
 * @component
 * @example
 * const location = dat/vocals_mono_8bit.dat
 * const type = 'dat'
 * <BBCWaveformData location={location} type={type}>
 *  {({data, loading, error}) => {
 *    return (
 *      <code>
 *        <pre>{JSON.stringify(data.toJSON(), null, 2)}</pre>
 *      </code>
 *    );
 *  }}
 * </BBCWaveformData>
 */
export const BBCWaveformData = ({ location, type, children }: Props) => {
  const asyncPeaks = useWaveformData(location, type);

  return <Fragment>{children(asyncPeaks)}</Fragment>;
};
